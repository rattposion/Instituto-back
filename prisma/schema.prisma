// Gerado a partir do SQL Supabase para Prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Workspace {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?
  owner_id    String?   // Relacionamento manual com User
  settings    Json?
  is_active   Boolean?  @default(true)
  created_at  DateTime? @default(now())
  updated_at  DateTime? @updatedAt
  users       User[]    @relation("WorkspaceUsers")
  members     WorkspaceMember[]
  pixels      Pixel[]
  integrations Integration[]
  api_keys    ApiKey[]
  audit_logs  AuditLog[]
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  name           String
  password_hash  String
  role           String    @default("viewer")
  avatar         String?
  workspace_id   String?
  is_active      Boolean?  @default(true)
  email_verified Boolean?  @default(false)
  last_login     DateTime?
  created_at     DateTime? @default(now())
  updated_at     DateTime? @updatedAt
  workspaces     Workspace[] @relation("WorkspaceUsers")
  workspaceMembers WorkspaceMember[]
  audit_logs     AuditLog[]
}

model WorkspaceMember {
  id           String    @id @default(uuid())
  workspace_id String
  user_id      String
  role         String    @default("viewer")
  invited_by   String?
  joined_at    DateTime?
  created_at   DateTime? @default(now())
  workspace    Workspace @relation(fields: [workspace_id], references: [id])
  user         User      @relation(fields: [user_id], references: [id])
}

model Pixel {
  id               String    @id @default(uuid())
  name             String
  pixel_id         String
  meta_account     String
  workspace_id     String
  status           String?   @default("inactive")
  last_activity    DateTime?
  events_count     Int?      @default(0)
  conversions_count Int?     @default(0)
  revenue          Decimal?  @default(0)
  settings         Json?
  created_at       DateTime? @default(now())
  updated_at       DateTime? @updatedAt
  workspace        Workspace @relation(fields: [workspace_id], references: [id])
  events           Event[]
  conversions      Conversion[]
  diagnostics      Diagnostic[]
}

model Event {
  id          String    @id @default(uuid())
  pixel_id    String
  event_name  String
  event_type  String?   @default("standard")
  parameters  Json?
  source      String?   @default("web")
  user_agent  String?
  ip_address  String?
  timestamp   DateTime? @default(now())
  processed   Boolean?  @default(false)
  error_message String?
  created_at  DateTime? @default(now())
  pixel       Pixel     @relation(fields: [pixel_id], references: [id])
}

model Conversion {
  id               String    @id @default(uuid())
  name             String
  pixel_id         String
  event_name       String
  rules            Json?
  conversion_rate  Decimal?  @default(0)
  total_conversions Int?     @default(0)
  total_value      Decimal?  @default(0)
  average_value    Decimal?  @default(0)
  is_active        Boolean?  @default(true)
  created_at       DateTime? @default(now())
  updated_at       DateTime? @updatedAt
  pixel            Pixel     @relation(fields: [pixel_id], references: [id])
}

model Diagnostic {
  id          String    @id @default(uuid())
  pixel_id    String
  severity    String
  category    String
  title       String
  description String
  url         String?
  status      String?   @default("active")
  last_checked DateTime? @default(now())
  created_at  DateTime? @default(now())
  pixel       Pixel     @relation(fields: [pixel_id], references: [id])
}

model Integration {
  id               String    @id @default(uuid())
  workspace_id     String
  type             String
  name             String
  description      String?
  config           Json?
  status           String?   @default("inactive")
  last_sync        DateTime?
  pixels_connected Int?      @default(0)
  created_at       DateTime? @default(now())
  updated_at       DateTime? @updatedAt
  workspace        Workspace @relation(fields: [workspace_id], references: [id])
}

model ApiKey {
  id           String    @id @default(uuid())
  workspace_id String
  name         String
  key_hash     String   @unique
  permissions  String[]
  last_used    DateTime?
  expires_at   DateTime?
  is_active    Boolean? @default(true)
  created_at   DateTime? @default(now())
  workspace    Workspace @relation(fields: [workspace_id], references: [id])
}

model AuditLog {
  id            String    @id @default(uuid())
  workspace_id  String
  user_id       String?
  action        String
  resource_type String
  resource_id   String?
  details       Json?
  ip_address    String?
  user_agent    String?
  created_at    DateTime? @default(now())
  workspace     Workspace @relation(fields: [workspace_id], references: [id])
  user          User?     @relation(fields: [user_id], references: [id])
}
